# -*- coding: utf-8 -*-
"""Retail Demand Forecasting via Gradient Boosting and Feature Encoding in Python .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ENCH1sndXkS3mWkTgt1aIHvLyCckOhfJ

# Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""# Data Collection and Analysis"""

df = pd.read_csv("/content/drive/MyDrive/Datasets_for_ML_Projects/Big Mart Sales Data/Train.csv")

df.head(2)

df.shape

# getting some info
df.info()

"""Some values are missing in Item_Weight

Categorical Features
- Item_Identifier            
- Item_Fat_Content           
- Item_Type                  
- Outlet_Identifier          
- Outlet_Size                
- Outlet_Location_Type       
- Outlet_Type
"""

df.isnull().sum()

"""## Handling Missing Values"""

# mean of Item_Weight
mean = df['Item_Weight'].mean()

# filling missing values with mean in Item_Weight
df['Item_Weight'] = df['Item_Weight'].fillna(mean)

df.isnull().sum()

# mode of Outlet_Size
mode = df.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))

mode['Grocery Store'].iloc[0]

for i in range(df.shape[0]):
  if pd.isnull(df['Outlet_Size'][i]):
    df.loc[i,'Outlet_Size'] = mode[df.loc[i, 'Outlet_Type']].iloc[0]

df.isnull().sum()

"""# Data Analysis"""

# statistical measures of data
df.describe()

"""## Numerical Features"""

sns.set()

plt.figure(figsize=(10,8))
sns.displot(df['Item_Weight'])
plt.show()

plt.figure(figsize=(10,8))
sns.displot(df['Item_Weight'])
plt.show()

plt.figure(figsize=(10,8))
sns.displot(df['Item_MRP'])
plt.show()

plt.figure(figsize=(10,8))
sns.displot(df['Item_Outlet_Sales'])
plt.show()

plt.figure(figsize=(7,5))
sns.countplot(x = df['Outlet_Establishment_Year'])
plt.show()

plt.figure(figsize=(7,5))
sns.countplot(x = df['Item_Fat_Content'])
plt.show()

"""Low Fat = LF = low fat and Regular = reg, We need to merge both"""

plt.figure(figsize=(30,4))
sns.countplot(x = df['Item_Type'])
plt.show()

plt.figure(figsize=(30,4))
sns.countplot(x = 'Outlet_Size', data=df)
plt.show()

"""# Data Pre-processing"""

df['Item_Fat_Content'] = df['Item_Fat_Content'].replace("LF","Low Fat")
df['Item_Fat_Content'] = df['Item_Fat_Content'].replace("low fat","Low Fat")

plt.figure(figsize=(7,5))
sns.countplot(x = df['Item_Fat_Content'])
plt.show()

df['Item_Fat_Content'] = df['Item_Fat_Content'].replace("reg","Regular")

plt.figure(figsize=(7,5))
sns.countplot(x = df['Item_Fat_Content'])
plt.show()

"""## Label Encoding"""

encoder = LabelEncoder()

categorical_features = ['Item_Identifier','Item_Fat_Content','Item_Type','Outlet_Identifier','Outlet_Size','Outlet_Location_Type','Outlet_Type']
for feature in categorical_features:
  df[feature] = encoder.fit_transform(df[feature])

df.head()

"""# Splitting Features and Target"""

X = df.drop(columns="Item_Outlet_Sales")
Y = df['Item_Outlet_Sales']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=8)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

"""# Machine Learning Model Training"""

regressor = XGBRegressor(
    n_estimators=150,
    max_depth=3,
    learning_rate=0.05,
    )

regressor.fit(X_train, Y_train)

y_pred_train = regressor.predict(X_train)
y_pred_test = regressor.predict(X_test)

train_accuracy = metrics.r2_score(Y_train, y_pred_train)
test_accuracy = metrics.r2_score(Y_test, y_pred_test)

print(train_accuracy,test_accuracy)

plt.figure(figsize=(6,6))
plt.scatter(Y_train,y_pred_train)
plt.plot([min(Y_test),max(Y_test)],[min(Y_test),max(Y_test)],color='blue')
plt.show()
plt.figure(figsize=(6,6))
plt.scatter(Y_test,y_pred_test)
plt.plot([min(Y_test),max(Y_test)],[min(Y_test),max(Y_test)],color='blue')
plt.show()

